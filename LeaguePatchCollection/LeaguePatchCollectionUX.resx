<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AQEBAQz+Dwk5IMtL+qpcAAAAAElFTkSuQmCC
</value>
  </data>
</root>